def generate_html_code(metadata):
    """
    Generate HTML based on article metadata and content.
    
    Args:
    - metadata (dict): Metadata of the article including title, author(s), publication date, keywords/tags,
                       abstract/summary, and word count.
    
    Returns:
    - html_content (str): Generated HTML content.
    """

    articles = metadata.get("article_contents", [])
    article_divs = "\n".join(f"<div>{para}</div><br>" for para in articles)
    word_count = sum(len(article.split()) for article in articles)
    
    # Generate image divs
    image_divs = ""
    for image_url in metadata.get("image_urls", []):
        image_divs += f'<img src="{image_url}" class="h-full max-h-48 " alt="Image">'
    
    html_content = """
    <html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <!-- Include Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-blue-50">
    <div class="container mx-auto p-8 bg-white shadow-lg rounded-lg">
        <h1 class="text-4xl font-bold text-blue-800 mb-6">{title}</h1>
        <div class="metadata mb-8">
            <p class="text-gray-800"><strong>Author(s):</strong> {authors}</p>
            <p class="text-gray-800"><strong>Publication Date:</strong> {publication_date}</p>
            <p class="text-gray-800"><strong>Keywords/Tags:</strong> {keywords}</p>
            <p class="text-gray-800"><strong>Abstract/Summary:</strong> {abstract}</p>
            <p class="text-gray-800"><strong>Word Count:</strong> {word_count}</p>
        </div>
        <div class="article-content">
            {article_divs}
        </div>
        <!-- Embed images -->
        <div class="mt-8 flex flex-wrap gap-4">
            {image_divs}
        </div>
    </div>
</body>
</html>
    """.format(
        title=metadata.get("title", ""),
        authors=metadata.get("authors", ""),
        publication_date=metadata.get("publication_date", ""),
        keywords=metadata.get("keywords", ""),
        abstract=metadata.get("abstract", ""),
        word_count=word_count,
        article_divs=article_divs,
        image_divs=image_divs
    )
    return html_content


# Example metadata
# metadata = {
#     "title": "Sample Article",
#     "authors": "John Doe",
#     "publication_date": "2024-04-24",
#     "keywords": "Sample, Article, Streamlit",
#     "abstract": "This is a sample article generated by Streamlit.",
#     "word_count": 500
# }

# # Example article content
# article_content = """
# <p>This is the content of the sample article. It can include paragraphs, headings, lists, etc.</p>
# <p>You can add any HTML content here.</p>
# """

# # Generate HTML
# html_content = generate_html(metadata, article_content)

# # Print the generated HTML
# print(html_content)